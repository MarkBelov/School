#include <iostream>
#include <queue>

using namespace std;

struct queue2 {
private:
    int count;
    int score, scoreB;
    int *qu;
public:
    queue2()
    {
        count = 0;
        score = 0;
        scoreB = 0;
        qu = new int[count];
    }

    ~queue2()
    {
        delete[] qu;
    }

    void push(int x)
    {
        ++count;
        qu[count - 1] = x;
    }

    int size()
    {
        return (count - score - scoreB);
    }

    void pop()
    {
        if (!empty()) {
            cout << "Error" << endl;
        }
        ++score;
    }

    bool empty()
    {
        if (score + scoreB >= count) {
            return 0;
        } else {
            return 1;
        }
    }

    int front()
    {
        if (!empty()) {
            cout << "Error" << endl;
            return (0);
        }
        ++score;
        return (qu[score - 1]);
    }

    int back()
    {
        if (!empty()) {
            cout << "Error" << endl;
            return (0);
        }
        ++scoreB;
        return (qu[count - scoreB]);
    }

};

int main()
{
    queue2 a;
    for (int i = 0; i < 8; ++i) {
        cout << i << " ";
        a.push(i);
    }
    cout << endl << "Back: " << a.back() << endl;
    cout << "Back: " << a.back() << endl;
    a.pop();
    cout << "pop" << endl;
    cout << "Front: " << a.front() << endl;
    cout << "Size: " << a.size() << endl;
    cout << "Back: " << a.back() << endl;
    a.pop();
    cout << "Front: " << a.front();
    a.pop();
    cout << "pop" << endl;
    a.pop(); // size of qu now = 0 -> (Error)
}
